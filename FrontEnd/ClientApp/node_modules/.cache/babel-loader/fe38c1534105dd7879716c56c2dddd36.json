{"ast":null,"code":"var _jsxFileName = \"/media/arham/codeInsidersOnline/FYP/api/FrontEnd/ClientApp/src/components/FetchData.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as WeatherForecastsStore from '../store/WeatherForecasts'; // At runtime, Redux will merge together...\n\n// ... plus incoming routing parameters\nclass FetchData extends React.PureComponent {\n  // This method is called when the component is first added to the document\n  componentDidMount() {\n    this.ensureDataFetched();\n  } // This method is called when the route parameters change\n\n\n  componentDidUpdate() {\n    this.ensureDataFetched();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"tabelLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"Weather forecast\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"This component demonstrates fetching data from the server and working with URL parameters.\"), this.renderForecastsTable(), this.renderPagination());\n  }\n\n  ensureDataFetched() {\n    const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\n    this.props.requestWeatherForecasts(startDateIndex);\n  }\n\n  renderForecastsTable() {\n    return /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, \"Temp. (C)\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, \"Temp. (F)\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, \"Summary\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, this.props.forecasts.map(forecast => /*#__PURE__*/React.createElement(\"tr\", {\n      key: forecast.date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }, forecast.date), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, forecast.temperatureC), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, forecast.temperatureF), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, forecast.summary)))));\n  }\n\n  renderPagination() {\n    const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\n    const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"btn btn-outline-secondary btn-sm\",\n      to: \"/fetch-data/\".concat(prevStartDateIndex),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Previous\"), this.props.isLoading && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 34\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(Link, {\n      className: \"btn btn-outline-secondary btn-sm\",\n      to: \"/fetch-data/\".concat(nextStartDateIndex),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Next\"));\n  }\n\n}\n\nexport default connect(state => state.weatherForecasts, // Selects which state properties are merged into the component's props\nWeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\n)(FetchData);","map":{"version":3,"sources":["/media/arham/codeInsidersOnline/FYP/api/FrontEnd/ClientApp/src/components/FetchData.tsx"],"names":["React","connect","Link","WeatherForecastsStore","FetchData","PureComponent","componentDidMount","ensureDataFetched","componentDidUpdate","render","renderForecastsTable","renderPagination","startDateIndex","parseInt","props","match","params","requestWeatherForecasts","forecasts","map","forecast","date","temperatureC","temperatureF","summary","prevStartDateIndex","nextStartDateIndex","isLoading","state","weatherForecasts","actionCreators"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApplicationState } from '../store';\r\nimport * as WeatherForecastsStore from '../store/WeatherForecasts';\r\n\r\n// At runtime, Redux will merge together...\r\ntype WeatherForecastProps =\r\n  WeatherForecastsStore.WeatherForecastsState // ... state we've requested from the Redux store\r\n  & typeof WeatherForecastsStore.actionCreators // ... plus action creators we've requested\r\n  & RouteComponentProps<{ startDateIndex: string }>; // ... plus incoming routing parameters\r\n\r\n\r\nclass FetchData extends React.PureComponent<WeatherForecastProps> {\r\n  // This method is called when the component is first added to the document\r\n  public componentDidMount() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  // This method is called when the route parameters change\r\n  public componentDidUpdate() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 id=\"tabelLabel\">Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server and working with URL parameters.</p>\r\n        {this.renderForecastsTable()}\r\n        {this.renderPagination()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private ensureDataFetched() {\r\n    const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\r\n    this.props.requestWeatherForecasts(startDateIndex);\r\n  }\r\n\r\n  private renderForecastsTable() {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.forecasts.map((forecast: WeatherForecastsStore.WeatherForecast) =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  private renderPagination() {\r\n    const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\r\n    const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\r\n\r\n    return (\r\n      <div className=\"d-flex justify-content-between\">\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${prevStartDateIndex}`}>Previous</Link>\r\n        {this.props.isLoading && <span>Loading...</span>}\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${nextStartDateIndex}`}>Next</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.weatherForecasts, // Selects which state properties are merged into the component's props\r\n  WeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(FetchData as any);\r\n"]},"metadata":{},"sourceType":"module"}